<noscript> <!-- TODO: find a way to do this without scripts, its probably possible? -->
    <style>
        .commands-sidebar {
            display: none;
        }
        .commands-data {
            display: none;
        }
    </style>
    <div class="card page-centered">
        <h3>this page is fairly useless without scripts, please use <code>p/help</code> for assistance with commands or preferrably enable scripts in your browser settings.</h3>
    </div>
</noscript>
<div class="card commands-sidebar">
    <span class="commands-title"><b>Commands</b></span>
    <hr>
    <ul class="commands-list-container">
        {{#each commands}}
            {{> createCommandCheckbox}}
        {{/each}}
    </ul>
</div>
<div class="commands-data-list flex column">
    {{#each commands}}
        {{> formatCommand}}
    {{/each}}
</div>
<div class="commands-data-list subcommands-data-list flex column">
    {{#each subcommands}}
        {{> formatCommand}}
    {{/each}}
</div>
<script>
    // Select all checkboxes and data containers for commands and subcommands
    const commandCheckboxes = document.querySelectorAll('.command-checkbox');
    const commandData = document.querySelectorAll('.command-data-container');
    const subcommandCheckboxes = document.querySelectorAll('.subcommand-checkbox');
    const subcommandData = document.querySelectorAll('.subcommand-data-container');

    // Helper to set display based on checkbox status
    function syncDisplay(checkboxes, dataContainers) {
        checkboxes.forEach((checkbox, index) => {
            const id = checkbox.id || `(index ${index})`;
            dataContainers[index].style.display = checkbox.checked ? 'flex' : 'none';
            console.log(`[syncDisplay] Checkbox ${id} checked: ${checkbox.checked}, data container display: ${dataContainers[index].style.display}`);
        });
    }

    // On page load, set display for both commands and subcommands
    console.log('[syncDisplay] Initializing display for commands');
    syncDisplay(commandCheckboxes, commandData);
    console.log('[syncDisplay] Initializing display for subcommands');
    syncDisplay(subcommandCheckboxes, subcommandData);

    // Ensure only one checkbox is checked at a time within each group
    function setupExclusiveCheckboxes(checkboxes, dataContainers) {
        checkboxes.forEach((checkbox, index) => {
            const id = checkbox.id || `(index ${index})`;
            checkbox.addEventListener('change', () => {
                console.log(`[setupExclusiveCheckboxes] Checkbox ${id} changed to: ${checkbox.checked}`);
                if (checkbox.checked) {
                    checkboxes.forEach((otherCheckbox, otherIndex) => {
                        const otherId = otherCheckbox.id || `(index ${otherIndex})`;
                        if (otherCheckbox !== checkbox) {
                            if (otherCheckbox.checked) {
                                console.log(`[setupExclusiveCheckboxes] Unchecking ${otherId}`);
                            }
                            otherCheckbox.checked = false;
                            dataContainers[otherIndex].style.display = 'none';
                        }
                    });
                    dataContainers[index].style.display = 'flex';
                    console.log(`[setupExclusiveCheckboxes] Showing data container for ${id}`);
                } else {
                    dataContainers[index].style.display = 'none';
                    console.log(`[setupExclusiveCheckboxes] Hiding data container for ${id}`);
                }
            });
        });
    }

    setupExclusiveCheckboxes(commandCheckboxes, commandData);
    setupExclusiveCheckboxes(subcommandCheckboxes, subcommandData);
</script>