<noscript> <!-- TODO: find a way to do this without scripts, its probably possible? -->
    <style>
        .commands-sidebar {
            display: none;
        }
        .commands-data {
            display: none;
        }
    </style>
    <div class="card page-centered">
        <h3>this page is fairly useless without scripts, please use <code>p/help</code> for assistance with commands or preferrably enable scripts in your browser settings.</h3>
    </div>
</noscript>
<div class="card commands-sidebar">
    <span class="commands-title"><b>Commands</b></span>
    <hr>
    <ul class="commands-list-container">
        {{#each commands}}
            {{> createCommandCheckbox}}
        {{/each}}
    </ul>
</div>
<div class="commands-data-list flex column">
    {{#each commands}}
        {{> formatCommand}}
    {{/each}}
</div>
<div class="commands-data-list subcommands-data-list flex column">
    {{#each subcommands}}
        {{> formatCommand}}
    {{/each}}
</div>
<script>
    // Select all checkboxes and data containers for commands and subcommands
    const commandCheckboxes = document.querySelectorAll('.command-checkbox');
    const commandData = document.querySelectorAll('.command-data-container');
    const subcommandCheckboxes = document.querySelectorAll('.subcommand-checkbox');
    const subcommandData = document.querySelectorAll('.subcommand-data-container');

    console.log('Found commandCheckboxes:', commandCheckboxes.length);
    console.log('Found commandData:', commandData.length);
    console.log('Found subcommandCheckboxes:', subcommandCheckboxes.length);
    console.log('Found subcommandData:', subcommandData.length);

    // Helper to map data containers by id
    function mapDataById(dataContainers) {
        const map = {};
        dataContainers.forEach(container => {
            // Assumes command-name attribute matches checkbox id
            const id = container.getAttribute('command-name');
            if (id) {
                map[id] = container;
                console.log('Mapped data container for command/subcommand:', id);
            }
        });
        return map;
    }

    const commandDataMap = mapDataById(commandData);
    const subcommandDataMap = mapDataById(subcommandData);

    // Helper to set display based on checkbox status
    function syncDisplay(checkboxes, dataMap) {
        checkboxes.forEach((checkbox) => {
            const id = checkbox.getAttribute('command-name');
            const container = dataMap[id];
            if (container) {
                container.style.display = checkbox.checked ? 'flex' : 'none';
                console.log(
                    `syncDisplay: ${checkbox.classList.contains('subcommand-checkbox') ? 'Subcommand' : 'Command'} "${id}" is now`,
                    checkbox.checked ? 'visible' : 'hidden'
                );
            }
        });
    }

    // On page load, set display for both commands and subcommands
    console.log('Syncing initial display state for commands');
    syncDisplay(commandCheckboxes, commandDataMap);
    console.log('Syncing initial display state for subcommands');
    syncDisplay(subcommandCheckboxes, subcommandDataMap);

    // Ensure only one checkbox is checked at a time within each group
    function setupExclusiveCheckboxes(checkboxes, dataMap) {
        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', () => {
                const id = checkbox.getAttribute('command-name');
                if (checkbox.checked) {
                    console.log(`Checkbox checked: ${id}`);
                    checkboxes.forEach((otherCheckbox) => {
                        if (otherCheckbox !== checkbox) {
                            otherCheckbox.checked = false;
                            const otherId = otherCheckbox.getAttribute('command-name');
                            const otherContainer = dataMap[otherId];
                            if (otherContainer) {
                                otherContainer.style.display = 'none';
                                console.log(`Unchecked and hid: ${otherId}`);
                            }
                        }
                    });
                    const container = dataMap[id];
                    if (container) {
                        container.style.display = 'flex';
                        console.log(`Displayed container for: ${id}`);
                    }
                } else {
                    const container = dataMap[id];
                    if (container) {
                        container.style.display = 'none';
                        console.log(`Hid container for: ${id}`);
                    }
                }
            });
        });
    }

    setupExclusiveCheckboxes(commandCheckboxes, commandDataMap);
    setupExclusiveCheckboxes(subcommandCheckboxes, subcommandDataMap);
</script>