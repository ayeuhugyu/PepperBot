{
    "command": {
        "scope": "typescript",
        "prefix": "templatecommand",
        "body": [
            "import { Command, CommandAccess, CommandInvoker, CommandOption, CommandResponse } from \"../lib/classes/command\";",
            "import * as action from \"../lib/discord_action\";",
            "import { getArgumentsTemplate, GetArgumentsTemplateType, CommandAccessTemplates } from \"../lib/templates\";",
            "import { CommandTag, InvokerType, CommandOptionType } from \"../lib/classes/command_enums\";",
            "",
            "const command = new Command(",
            "    {",
            "        name: 'name',",
            "        description: 'description',",
            "        long_description: 'description',",
            "        tags: [],",
            "        pipable_to: [],",
            "        options: [",
            "            new CommandOption({",
            "                name: 'argument',",
            "                description: 'description',",
            "                long_description: 'description',",
            "                type: CommandOptionType.String,",
            "                required: true",
            "            })",
            "        ],",
            "        access: CommandAccessTemplates.public,",
            "        input_types: [InvokerType.Message, InvokerType.Interaction],",
            "        example_usage: \"\",",
            "        aliases: []",
            "    },",
            "    getArgumentsTemplate(GetArgumentsTemplateType.SingleStringWholeMessage, [\"argument\"]),",
            "    async function execute ({ invoker, args, guild_config }) {",
            "",
            "    }",
            ");",
            "",
            "export default command;"
        ],
        "description": "Boilerplate code for a command file"
    },
    "subcommand": {
        "scope": "typescript",
        "prefix": "templatesubcommand",
        "body": [
            "const subcommand = new Command(",
            "    {",
            "        name: 'name',",
            "        description: 'description',",
            "        long_description: 'description',",
            "        tags: [],",
            "        pipable_to: [],",
            "        options: [",
            "            new CommandOption({",
            "                name: 'argument',",
            "                description: 'description',",
            "                long_description: 'description',",
            "                type: CommandOptionType.String,",
            "                required: true",
            "            })",
            "        ],",
            "        access: CommandAccessTemplates.public,",
            "        input_types: [InvokerType.Message, InvokerType.Interaction],",
            "        example_usage: \"\",",
            "        aliases: []",
            "    },",
            "    getArgumentsTemplate(GetArgumentsTemplateType.SingleStringWholeMessage, [\"argument\"]),",
            "    async function execute ({ invoker, args, guild_config }) {",
            "",
            "    }",
            ");",
        ],
        "description": "Boilerplate code for a command file without import statements"
    },
    "getarguments": {
        "scope": "typescript",
        "prefix": "templategetarguments",
        "body": [
            "function getArguments({ invoker, command_name_used, guild_config }) {",
            "    invoker = invoker as CommandInvoker<InvokerType.Message>;",
            "    const args: Record<string, string | undefined> = {};",
            "    const commandLength = `${guild_config.other.prefix}\\${command_name_used}`.length;",
            "    const arg = invoker.content.slice(commandLength)?.trim()?.split(' ')[0]?.trim();",
            "    args['argname'] = arg;",
            "    return args;",
            "},"
        ],
        "description": "Boilerplate code for a getArguments function"
    }
}